openapi: "3.0.1"
info:
  title: "EventosApp"
  version: "2021-09-04T19:19:41Z"
servers:
  - url: "https://API_GW_ID.execute-api.us-east-1.amazonaws.com/{basePath}"
    variables:
      basePath:
        default: "/prod"
paths:
  /events:
    get:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - cognito-authorizer: []
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:AWS_ACC_ID:function:ListEventos/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: "when_no_match"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws_proxy"
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/evento"
        required: true
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      security:
        - cognito-authorizer: []
      x-amazon-apigateway-request-validator: "Validate body"
      x-amazon-apigateway-integration:
        httpMethod: "POST"
        uri: "arn:aws:apigateway:us-east-1:lambda:path/2015-03-31/functions/arn:aws:lambda:us-east-1:AWS_ACC_ID:function:AddEvento/invocations"
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json:
            "{\n  \"evento_name_str\" : $input.json('$.eventoName'),\n\
            \  \"description_str\" : $input.json('$.description'),\n  \"type_str\"\
            \ : $input.json('$.type'),\n  \"local_str\" : $input.json('$.local'),\n\
            \  \"reportingPhoneNumber\" : $input.json('$.reportingPhoneNumber'),\n\
            \  \"confirmationRequired\" : $input.json('$.confirmationRequired')\n}"
        passthroughBehavior: "when_no_templates"
        contentHandling: "CONVERT_TO_TEXT"
        type: "aws"
    options:
      responses:
        "200":
          description: "200 response"
          headers:
            Access-Control-Allow-Origin:
              schema:
                type: "string"
            Access-Control-Allow-Methods:
              schema:
                type: "string"
            Access-Control-Allow-Headers:
              schema:
                type: "string"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: "200"
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        requestTemplates:
          application/json: '{"statusCode": 200}'
        passthroughBehavior: "when_no_match"
        type: "mock"
components:
  schemas:
    Empty:
      title: "Empty Schema"
      type: "object"
    evento:
      title: "Evento"
      type: "object"
      properties:
        eventoName:
          type: "string"
        description:
          type: "string"
        family:
          type: "string"
        city:
          type: "string"
        reportingPhoneNumber:
          type: "string"
        confirmationRequired:
          type: "boolean"
  securitySchemes:
    cognito-authorizer:
      type: "apiKey"
      name: "authorization"
      in: "header"
      x-amazon-apigateway-authtype: "cognito_user_pools"
      x-amazon-apigateway-authorizer:
        providerARNs:
          - "arn:aws:cognito-idp:us-east-1:AWS_ACC_ID:userpool/COGNITO_ID"
        type: "cognito_user_pools"
x-amazon-apigateway-request-validators:
  Validate body:
    validateRequestParameters: false
    validateRequestBody: true
